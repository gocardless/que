#!/usr/bin/env ruby
# frozen_string_literal: true

require "logger"
require "optparse"
require "ostruct"
require "prometheus/middleware/exporter"
require "prometheus_gcstat"
require "puma"
require "que"
require "rack"
USE_RACKUP = Gem::Version.new(Rack.release) >= Gem::Version.new("3.0.0")
if USE_RACKUP
  require "rackup"
end
require "rack/handler/puma"

$stdout.sync = true

options = OpenStruct.new

# rubocop:disable Layout/LineLength
OptionParser.new do |opts|
  opts.banner = "usage: que [options] file/to/require ..."

  opts.on("-i", "--wake-interval [INTERVAL]", Float, "Set maximum interval between polls of the job queue (in seconds) (default: 5.0)") do |wake_interval|
    options.wake_interval = wake_interval
  end

  opts.on("-p", "--metrics-port [PORT]", Integer, "Enable metrics and expose them on this port") do |metrics_port|
    options.metrics_port = metrics_port
  end

  opts.on("-e", "--cursor-expiry [EXPIRY]", Float, "Enable caching of cursors for a duration (in seconds) for improved performance (default: 5.0)") do |cursor_expiry|
    options.cursor_expiry = cursor_expiry
  end

  opts.on("--lock-window [WINDOW]", Float, "Duration (in seconds) over which job lockers apply their budget") do |lock_window|
    options.lock_window = lock_window
  end

  opts.on("--lock-budget [BUDGET]", Float, "Max duration (in seconds) worker should spend locking jobs in --lock-window") do |lock_budget|
    options.lock_budget = lock_budget
  end

  opts.on("-c", "--worker-count [COUNT]", Integer, "Start this many threaded workers") do |worker_count|
    options.worker_count = worker_count
  end

  opts.on("-l", "--log-level [LEVEL]", String, "Set level of Que's logger (debug, info, warn, error, fatal) (default: info)") do |log_level|
    options.log_level = log_level
  end

  opts.on("-q", "--queue-name [NAME]", String, "Set the name of the queue to work jobs from (default: default)") do |queue_name|
    options.queue_name = queue_name
  end

  opts.on("--timeout [TIMEOUT]", Float, "Set the duration (in seconds) to wait, after receiving SIGTERM/SIGINT, for workers to finish before forcing them to stop") do |timeout|
    options.timeout = timeout
  end

  opts.on("--secondary-queues high_priority_queue,low_priority_queue", Array, "Sets the queues to poll for multiple queue consumption") do |secondary_queues|
    options.secondary_queues = secondary_queues
  end

  opts.on("-v", "--version", "Show Que version") do
    require "que"
    $stdout.puts "Que version #{Que::VERSION}"
    exit 0
  end

  opts.on("-h", "--help", "Show help text") do
    $stdout.puts opts
    exit 0
  end

  opts.on("--ci", "Don't wait for sigterm exit after boot") do
    options.ci = true
  end
end.parse!(ARGV)
# rubocop:enable Layout/LineLength

if ARGV.empty?
  $stdout.puts <<~OUTPUT
    You didn't include any Ruby files to require!
    Que needs to be able to load your application before it can process jobs.
    (Hint: If you're using Rails, try `que ./config/environment.rb`)
    (Or use `que -h` for a list of options)
  OUTPUT
  exit 1
end

ARGV.each do |file|
  require file
rescue LoadError
  $stdout.puts "Could not load file '#{file}'"
end

log_level        = options.log_level     || ENV["QUE_LOG_LEVEL"]           || "info"
queue_name       = options.queue_name    || ENV["QUE_QUEUE"]               || Que::Worker::DEFAULT_QUEUE
wake_interval    = options.wake_interval || ENV["QUE_WAKE_INTERVAL"]&.to_f || Que::Worker::DEFAULT_WAKE_INTERVAL
cursor_expiry    = options.cursor_expiry || wake_interval
worker_count     = options.worker_count  || 1
timeout          = options.timeout
secondary_queues = options.secondary_queues || []

Que.logger ||= Logger.new($stdout)

if options.ci
  require "active_record"

  ActiveRecord::Base.establish_connection(
    adapter: "postgresql",
    host: ENV.fetch("PGHOST", "localhost"),
    user: ENV.fetch("PGUSER", "postgres"),
    password: ENV.fetch("PGPASSWORD", ""),
    database: ENV.fetch("PGDATABASE", "que-test"),
  )

  Que.connection = ActiveRecord
  Que.migrate!
end

begin
  Que.logger.level = Logger.const_get(log_level.upcase) if log_level
rescue NameError
  $stdout.puts "Bad logging level: #{log_level}"
  exit 1
end

def wait_for_signals(*signals, sleep_interval: 1)
  received_signal = false
  signals.each { |signal| trap(signal) { received_signal = true } }

  sleep(sleep_interval) until received_signal
end

worker_group = Que::WorkerGroup.start(
  worker_count,
  queue: queue_name,
  wake_interval: wake_interval,
  lock_cursor_expiry: cursor_expiry,
  lock_window: options.lock_window,
  lock_budget: options.lock_budget,
  secondary_queues: secondary_queues,
)

if options.metrics_port
  Thread.new do
    Que.logger&.info(
      event: "serving_metrics",
      msg: "Serving /metrics endpoint",
      port: options.metrics_port,
    )

    health_check = ->(_) { [200, {}, ["healthy"]] }

    Prometheus::MemoryStats.
      new(Prometheus::Client.registry).start(interval: 10.seconds, delay: 10.seconds)

    app = Rack::URLMap.new(
      "/" => Rack::Builder.new do
        use Que::Middleware::WorkerCollector, worker_group: worker_group
        use Prometheus::Middleware::Exporter

        run health_check
      end,
      "/queue" => Rack::Builder.new do
        registry = Prometheus::Client::Registry.new

        use Que::Middleware::QueueCollector, registry: registry
        use Prometheus::Middleware::Exporter, registry: registry

        run health_check
      end,
    )

    # Uses the Handler::Puma class to build the config and then we call Server directly
    # instead of going through the Handler::Puma.run method. This is to prevent the Handler
    # from trapping signals and which would prevent Que exiting cleanly.
    # https://github.com/puma/puma/blob/master/lib/rack/handler/puma.rb
    server_options = { Host: "0.0.0.0", Port: options.metrics_port, Silent: false, AccessLog: [] }
    handler = USE_RACKUP ? Rackup::Handler::Puma : Rack::Handler::Puma
    puma_config = handler.config(app, server_options)
    puma_config.clamp

    log_writer = Puma::LogWriter.stdio
    puma_config.options[:log_writer] = log_writer
    log_writer.log "Starting metrics server on #{puma_config.options[:Host]}:#{puma_config.options[:Port]}"

    Puma::Server.new(app, nil, puma_config.options).run.join
  end
end

# For a basic CI check we just want to ensure the app boots so don't want to
# block the main thread, so this will just exit immediately.
unless options.ci
  wait_for_signals("INT", "TERM")
end

worker_group.stop(timeout)
